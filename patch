diff --git a/.eslintrc.json b/.eslintrc.json
index c755460..8163a4d 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -1,3 +1,6 @@
 {
-  "extends": "steelbrain"
+  "extends": "steelbrain",
+  "rules": {
+    "import/prefer-default-export": 0
+  }
 }
diff --git a/.gitignore b/.gitignore
index 096b41a..dc996de 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
 node_modules
 /lib
 .DS_Store
+/tmp
diff --git a/.npmignore b/.npmignore
index 68b7278..7b1026f 100644
--- a/.npmignore
+++ b/.npmignore
@@ -2,3 +2,4 @@ node_modules
 /src
 /spec
 .DS_Store
+/tmp
diff --git a/package.json b/package.json
index 935b7a9..0ab1489 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sb-react-table",
   "version": "0.0.0",
-  "description": "React Table done right",
+  "description": "React Table Component done right",
   "main": "lib/index.js",
   "scripts": {
     "test": "(apm test) && (flow check) && (eslint . )",
@@ -24,6 +24,8 @@
     "babel-preset-steelbrain": "^4.0.2",
     "eslint-config-steelbrain": "^1.0.4",
     "flow-bin": "^0.32.0",
-    "jasmine-fix": "^1.0.1"
+    "jasmine-fix": "^1.0.1",
+    "react": "^15.3.1",
+    "react-dom": "^15.3.1"
   }
 }
diff --git a/src/index.js b/src/index.js
new file mode 100644
index 0000000..25f5826
--- /dev/null
+++ b/src/index.js
@@ -0,0 +1,52 @@
+/* @flow */
+
+import React from 'react'
+import type { Column } from './types'
+
+export default class ReactTable extends React.Component {
+  render() {
+    const {
+      rows,
+      columns,
+      showHeader = true,
+      keyProperty = 'key',
+      renderHeader = ReactTable.$renderHeader,
+      renderRow = ReactTable.$renderRow,
+    } = this.props
+
+    if (!Array.isArray(rows)) {
+      throw new Error('<ReactTable /> excepts attribute rows to be an Array')
+    } else if (!Array.isArray(columns)) {
+      throw new Error('<ReactTable /> excepts attribute columns to be an Array')
+    }
+
+    return (
+      <table>
+        { showHeader ? (
+          <thead>
+            <tr>
+              { columns.map(function(value, index, array) {
+                return <th key={`${index}+${value.key}+${value.label}`}>{renderHeader(value, index, array)}</th>
+              }) }
+            </tr>
+          </thead>
+        ) : null}
+        <tbody>
+          { rows.map(function(entry, index) {
+            return <tr key={entry[keyProperty]}>
+              {columns.map(function(column) {
+                return <td key={entry[keyProperty] + '.' + column.key}>{renderRow(index, column.key, rows)}</td>
+              })}
+            </tr>
+          }) }
+        </tbody>
+      </table>
+    )
+  }
+  static $renderHeader(value: Column): string {
+    return value.label
+  }
+  static $renderRow(index: string, key: string, data: Object): string {
+    return data[index][key]
+  }
+}
diff --git a/src/types.js b/src/types.js
new file mode 100644
index 0000000..f35729a
--- /dev/null
+++ b/src/types.js
@@ -0,0 +1,3 @@
+/* @flow */
+
+export type Column = { key: string, label: string }
